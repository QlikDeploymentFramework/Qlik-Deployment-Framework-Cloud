// ___________________________________________________________________________
  //  Calendar Generation Script
  // v1.0, 16-Sep-2008, Author: Jonas Valleskog
  // v2.0, 07-Dec-2012, Author: Jonas Valleskog
  // v3.0  23-Jan-2013, Authors: Finn Nordensj√∂, Magnus Berg
  // v3.1  05-Mar-2014, Author: Magnus Berg (minor fixes and added additional flags)
  // v3.2  2016, Author: Magnus Berg added native Qlik Sense calendar
  // v4.0  06-apr-2023, Author: Magnus Berg clean-up for use only with Qlik Sense 
  // Notes: Generic calendar generation script that enables scalable handling of creating and navigating multiple date fields

SUB CalendarGen(vL.QDF.DateFieldLinkName,vL.QDF.CalendarTableName,vL.QDF.MonthsLeftFiscalDates,vL.QDF.CalendarGenMinDate,vL.QDF.CalendarGenMaxDate,vL.QDF.DateFormat);

//for vL.QDF.IndexFields_tmp = 0 to (substringcount(',$(vL.QDF.DateFieldLinkName),',',')-2)

//LET vL.QDF.DateFieldLinkName_new=trim(TextBetween(',$(vL.QDF.DateFieldLinkName),', ',' , ',' , $(vL.QDF.IndexFields_tmp)+1 ));


if '$(vL.QDF.CalendarTableName)' ='' then // if multiple fields are mode is used we need to autogenerate the maping  calendar tablename
	Let vL.QDF.CalendarTableName = '$(vL.QDF.DateFieldLinkName)';
endif

// ## Calendar format parsing Start
LET vL.QDF.DateFormat_$(vL.QDF.IndexFields_tmp)=trim(TextBetween(',$(vL.QDF.DateFormatOrg),', ',' , ',' , $(vL.QDF.IndexFields_tmp)+1 ));


if '$(vL.QDF.DateFormat)' ='' then //validate if dateformat avalible
  LET vL.QDF.DateFormat='$(DateFormat)'; //Use standard dateformat if speciffic format is missing
endif

// if Min and Max set manual
if not '$(vL.QDF.vL.QDF.CalendarGenMinDate)' = '' and not '$(vL.QDF.CalendarGenMaxDate)' = ''  then
LET vL.QDF.CalendarGenMinDate = Num(Date(Date#('$(vL.QDF.CalendarGenMinDate)','$(vL.QDF.DateFormat)'))) ;
LET vL.QDF.CalendarGenMaxDate = Num(Date(Date#('$(vL.QDF.CalendarGenMaxDateOrg)','$(vL.QDF.DateFormat)'))) ;

endif

// if Min and Max set automatic or not working in manual
if '$(vL.QDF.CalendarGenMinDate)' = '' or '$(vL.QDF.CalendarGenMaxDate)' = ''  then

CalendarGenMinMax:
  Load 
                num(min(_DateMinMaxKey)) AS QDF.CalendarGenMinDate, //gets min date out of key date in the fact table
                num(max(_DateMinMaxKey)) AS QDF.CalendarGenMaxDate; //gets max date out of key date in the fact table
  Load FieldValue('$(vL.QDF.DateFieldLinkName)',IterNo()) as _DateMinMaxKey
  AutoGenerate(1)
  while not IsNull(FieldValue('$(vL.QDF.DateFieldLinkName)',IterNo()));

LET vL.QDF.CalendarGenMinDate = Num(Date(Date#(Date(Peek('QDF.CalendarGenMinDate',0,'QDF.CalendarGenMinMax')), '$(vL.QDF.DateFormat)')));
LET vL.QDF.CalendarGenMaxDate = Num(Date(Date#(Date(Peek('QDF.CalendarGenMaxDate',-1,'QDF.CalendarGenMinMax')), '$(vL.QDF.DateFormat)')));

DROP TABLE CalendarGenMinMax;

endif

if not '$(vL.QDF.CalendarGenMinDate)'='' then // If we can't find min or max date skipp calendar

LET vL.QDF.CalendarGenToday = Num(Today());

// Quarter map generation
CalendargenQuarterMap:
MAPPING LOAD * INLINE [
    Month, Quarter
    1, Q1
    2, Q1
    3, Q1
    4, Q2
    5, Q2
    6, Q2
    7, Q3
    8, Q3
    9, Q3
    10, Q4
    11, Q4
    12, Q4
];


// Calendar Generation

[$(vL.QDF.CalendarTableName)]:
LOAD *,
	autoNumber([$(vL.QDF.DateFieldLinkName)],'$(vL.QDF.CalendarTableName)') AS [num$(vL.QDF.DateFieldLinkName)];
LOAD
	[$(vL.QDF.DateFieldLinkName)],
	if(Year2Date([$(vL.QDF.DateFieldLinkName)], 0, 1, $(vL.QDF.CalendarGenToday)),1) AS [$(vL.QDF.CalendarTableName) YTD Flag],
	if(Year2Date([$(vL.QDF.DateFieldLinkName)], -1, 1, $(vL.QDF.CalendarGenToday)),1) AS [$(vL.QDF.CalendarTableName) PYTD Flag],
	If(Month([$(vL.QDF.DateFieldLinkName)]) = Month($(vL.QDF.CalendarGenToday)), 1, 0) as [$(vL.QDF.CalendarTableName) CurrentMonth Flag],
	If(Month(AddMonths([$(vL.QDF.DateFieldLinkName)],1)) = Month($(vL.QDF.CalendarGenToday)), 1, 0) as [$(vL.QDF.CalendarTableName) LastMonth Flag];
LOAD
	Date($(vL.QDF.CalendarGenMinDate) + RecNo() - 1) AS [$(vL.QDF.DateFieldLinkName)]
AUTOGENERATE ($(vL.QDF.CalendarGenMaxDate) - $(vL.QDF.CalendarGenMinDate)+1);


if not '$(vL.QDF.MonthsLeftFiscalDates)' = '' then
  /*Catch scenario where negative number of months provided rather than remaining months
  If a negative value is provided it is possible to move the Fiscal Year to the 
  Prefix rather than Suffix Year */
  if $(vL.QDF.MonthsLeftFiscalDates) < 0 then 
    vL.QDF.FiscalStartMonth = 13 - (vL.QDF.MonthsLeftFiscalDates + 12);
    else
    vL.QDF.FiscalStartMonth = 13 - vL.QDF.MonthsLeftFiscalDates;
endif;
  

Left Join ([$(vL.QDF.CalendarTableName)])
Load [$(vL.QDF.DateFieldLinkName)],
// Fiscal Dates
	Year(AddMonths([$(vL.QDF.DateFieldLinkName)],$(vL.QDF.MonthsLeftFiscalDates))) AS [$(vL.QDF.CalendarTableName) Fiscal Year],
	Dual(Month([$(vL.QDF.DateFieldLinkName)]), Num(Month(AddMonths([$(vL.QDF.DateFieldLinkName)],$(vL.QDF.MonthsLeftFiscalDates))))) AS [$(vL.QDF.CalendarTableName) Fiscal Month],
	'Q' & Ceil(Num(Month(AddMonths([$(vL.QDF.DateFieldLinkName)],$(vL.QDF.MonthsLeftFiscalDates)))) / 3) AS [$(vL.QDF.CalendarTableName) Fiscal Quarter],
	Date(MonthStart(AddMonths([$(vL.QDF.DateFieldLinkName)],$(vL.QDF.MonthsLeftFiscalDates))),'MM-YYYY') AS [$(vL.QDF.CalendarTableName) Fiscal MonthYear], 
	dual('Q' & Ceil(Num(Month(AddMonths([$(vL.QDF.DateFieldLinkName)],$(vL.QDF.MonthsLeftFiscalDates)))) / 3) & '-' & Year(AddMonths([$(vL.QDF.DateFieldLinkName)],$(vL.QDF.MonthsLeftFiscalDates))),
	QuarterStart(AddMonths([$(vL.QDF.DateFieldLinkName)],$(vL.QDF.MonthsLeftFiscalDates)))) AS [$(vL.QDF.CalendarTableName) Fiscal QuarterYear],
  if(YearToDate([$(vL.QDF.DateFieldLinkName)], 0, $(vL.QDF.FiscalStartMonth), $(vL.QDF.CalendarGenToday)),1,0) AS [$(vL.QDF.CalendarTableName) Fiscal YTD Flag],
  if(YearToDate([$(vL.QDF.DateFieldLinkName)], -1, $(vL.QDF.FiscalStartMonth), $(vL.QDF.CalendarGenToday)),1,0) AS [$(vL.QDF.CalendarTableName) Fiscal PYTD Flag]
	// End Fiscal Dates
Resident [$(vL.QDF.CalendarTableName)];

endif

if vL.QDF.IndexFields_tmp = 0 then
	let vL.QDF.DateFieldLinkName_Derive='[$(vL.QDF.DateFieldLinkName)]';
else
	let vL.QDF.DateFieldLinkName_Derive='$(vL.QDF.DateFieldLinkName_Derive)'&', [$(vL.QDF.DateFieldLinkName)]';
endif

[std]: // will create a virtual calendar named $(vL.QDF.CalendarTableName).cal
	 DECLARE FIELD DEFINITION Tagged ('$date') // Sort order
FIELDS
  Dual(Year($1), YearStart($1)) AS [Year] Tagged ('$axis', '$year'),
  Dual('Q'&Num(Ceil(Num(Month($1))/3)),Num(Ceil(NUM(Month($1))/3),00)) AS [Quarter] Tagged ('$axis', '$quarter'),
  Dual(Year($1)&'-Q'&Num(Ceil(Num(Month($1))/3)),QuarterStart($1)) AS [YearQuarter] Tagged ('$axis', '$yearquarter'),
  Dual(Year($1),WeekStart($1)) & '-' & Num(Week($1),00) AS [YearWeek] Tagged ('$axis', '$yearweek'),
  Month($1) AS [Month] Tagged ('$month'),
  Dual(Year($1)&'-'&Month($1), monthstart($1)) AS [YearMonth] Tagged ('$axis', '$yearmonth'),
  Dual(W&Num(Week($1),00), Num(Week($1),00)) AS [Week] Tagged ('$axis', '$weeknumber'),
  Day($1) as Day Tagged ('$axis', '$day'),
  Weekday($1) as [Weekday] Tagged ('$axis', '$weekday');
Derive Fields from Fields $(vL.QDF.DateFieldLinkName) Using [std];

else
trace '### DF Error Did not find min and max dates, Is this a date field?, ending CalendarGen';
endif
// Cleanup

Set vL.QDF.CalendarGenMinDate = ;
Set vL.QDF.CalendarGenMaxDate = ;
Set vL.QDF.FindFieldTableName = ;
Set vL.QDF.DateFieldLinkName = ;
Set vL.QDF.CalendarTableName = ;
Set vL.QDF.CalendarGenMinDate = ;
SET vL.QDF.CalendarGenToday = ;
SET vL.QDF.MonthsLeftFiscalDates = ;
SET vL.QDF.FiscalStartMonth = ;
SET vL.QDF.DateFormat=;
SET vL.QDF.DateFormat_old=;
SET vL.QDF.DateFormatOrg=;
SET vL.QDF.DateFieldLinkName_Derive=;


END SUB
