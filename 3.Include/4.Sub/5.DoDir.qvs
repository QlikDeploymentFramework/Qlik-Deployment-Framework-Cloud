// ___________________________________________________________________________
//     Deployment Framework DoDir sub function 5.DoDir.qvs 
//  
//  Returns a Table containing files and path in selected file system (vL.QDF.DoDirRoot)
//  First include the DoDir Function $(Include=$(vG.SubPath)/5.DoDir.qvs);
//  Use the function DoDir to execute. examples:
//  call DoDir ('$(vG.RootPath)'); //list all under all subfolders
//  call DoDir ('$(vG.RootPath)/*.qvd'); // wildcard
//  call DoDir ('$(vG.BasePath),Table Name)'); //Change Table name 
//	call DoDir ('$(vG.BasePath),'','true')'); //list only folders

sub DoDir (vL.QDF.DoDirRoot,vL.QDF.DoDirTableName,vL.QDF.FoldersOnly,vL.QDF.SingleFolder,vL.QDF.QualifyFelds)

let vL.QDF.DoDirRoot=trim('$(vL.QDF.DoDirRoot)'); // Trim vL.QDF.DoDirRoot
let vL.QDF.Filename=; // remove variable (if exists)

if '$(vL.QDF.DoDirTableName)'='' then // If no TableName specified use DoDirFileList
	SET vL.QDF.DoDirTableName = 'DoDirFileList';
endif;

if lower('$(vL.QDF.QualifyFelds)')='true' then // if qualify switch set to true
LET vL.QDF.QualifyFelds='$(vL.QDF.DoDirTableName).'; // Set vL.QDF.QualifyFelds as the same as table name
else
	LET vL.QDF.QualifyFelds=;
endif 
unqualify $(vL.QDF.QualifyFelds)FullyQualifiedName,$(vL.QDF.QualifyFelds)DoDirFileSize,$(vL.QDF.QualifyFelds)DoDirFileTime,$(vL.QDF.QualifyFelds)DoDirFileName,$(vL.QDF.QualifyFelds)DoDirContainerPath,$(vL.QDF.QualifyFelds)DoDirFileExtension,$(vL.QDF.QualifyFelds)DoDirFileNameCount ; 
sub vL.QDF.DoDirTableName(vL.QDF.DoDirFile); //DoDir table generate sub
	[$(vL.QDF.DoDirTableName)]:
 	ADD	
 	Load '$(vL.QDF.DoDirFile)' as '$(vL.QDF.QualifyFelds)FullyQualifiedName', 
	FileSize( '$(vL.QDF.DoDirFile)' ) as '$(vL.QDF.QualifyFelds)DoDirFileSize',
	timestamp(FileTime( '$(vL.QDF.DoDirFile)' ),'$(TimestampFormat)') as '$(vL.QDF.QualifyFelds)DoDirFileTime',
	subfield('$(vL.QDF.DoDirFile)','/',-1) as '$(vL.QDF.QualifyFelds)DoDirFileName',
	right('$(vL.QDF.DoDirFile)', (len('$(vL.QDF.DoDirFile)')-len('$(vL.QDF.DoDirRoot)'))) as '$(vL.QDF.QualifyFelds)DoDirContainerPath',
	if( lower('$(vL.QDF.FoldersOnly)')='true', '' , upper(subfield('$(vL.QDF.DoDirFile)','.',-1))) as '$(vL.QDF.QualifyFelds)DoDirFileExtension'
autogenerate 1;
end sub

// Check if a specific File Extension is used, separate out extension and filename Also special for Qlik Sense lib folders
if index('$(vL.QDF.DoDirRoot)','*')>0 and FindOneOf('$(vL.QDF.DoDirRoot)','/')>0 then 
	LET vL.QDF.Specific_File_Type= right('$(vL.QDF.DoDirRoot)',len( '$(vL.QDF.DoDirRoot)')-(index( '$(vL.QDF.DoDirRoot)', '*',-1))); // Get file extension
  trace '$(vL.QDF.Specific_File_Type)';
  if FindOneOf('$(vL.QDF.Specific_File_Type)','/')>0 then // If filetype contains / it's probably a folder
    LET vL.QDF.Specific_File_Type=''; // remove filetype
  endif
  let vL.QDF.Filename=left(right('$(vL.QDF.DoDirRoot)',len('$(vL.QDF.DoDirRoot)')-index('$(vL.QDF.DoDirRoot)','/',-1)),len(right('$(vL.QDF.DoDirRoot)',len('$(vL.QDF.DoDirRoot)')-index('$(vL.QDF.DoDirRoot)','/',-1)))-len('$(vL.QDF.Specific_File_Type)'));
  LET vL.QDF.DoDirRoot= left ('$(vL.QDF.DoDirRoot)',index('$(vL.QDF.DoDirRoot)','/',-1)-1); // Remove filename from path
 	if vL.QDF.Filename= '*' then 
 		LET vL.QDF.Filename= '';
 	endif 
else 
	LET vL.QDF.Specific_File_Type= '';
endif
LET vL.QDF.Filename= '';

LET vL.QDF.DoDirRootTmp= '$(vL.QDF.DoDirRoot)';

if lower('$(vL.QDF.FoldersOnly)')='true' then // If folders only is used (vL.QDF.FoldersOnly) execute vL.QDF.DoDirTableName to add first folder
      call vL.QDF.DoDirTableName('$(vL.QDF.DoDirRootTmp)');
endif

sub vL.DoDirTmp (vL.QDF.DoDirRootTmp) // DoDir main Sub
if not lower('$(vL.QDF.FoldersOnly)')='true' then // If folders only is used (vL.QDF.Specific_File_Type) do not execute vL.QDF.DoDirTableName
  for each vL.QDF.DoDirFile in filelist ('$(vL.QDF.DoDirRootTmp)') // Index Files
		Switch right('$(vL.QDF.DoDirFile)',len('$(vL.QDF.Specific_File_Type)')) //Filter instead of using wildcards that doed not work for external drives
		case '$(vL.QDF.Specific_File_Type)' 
		call vL.QDF.DoDirTableName('$(vL.QDF.DoDirFile)');
		case ''
		call vL.QDF.DoDirTableName('$(vL.QDF.DoDirFile)');
		default
		
		end switch
  
  next vL.QDF.DoDirFile
endif

if not lower('$(vL.QDF.SingleFolder)')='true' then
for each vL.QDF.DirTmp in dirlist ('$(vL.QDF.DoDirRootTmp)' ) // Index folders
	if lower('$(vL.QDF.FoldersOnly)')='true' then // If folders only is used (vL.QDF.FoldersOnly) execute vL.QDF.DoDirTableName
		call vL.QDF.DoDirTableName('$(vL.QDF.DirTmp)');
	endif
	call vL.DoDirTmp ('$(vL.QDF.DirTmp)')
next vL.QDF.DirTmp
endif
end sub


call vL.DoDirTmp ('$(vL.QDF.DoDirRootTmp)')

if NoOfFields('$(vL.QDF.DoDirTableName)') > 0 then  // Validate DoDir table  

// Join file count information field
Left join ([$(vL.QDF.DoDirTableName)]) 
Add 
Load [$(vL.QDF.QualifyFelds)DoDirFileName],
count([$(vL.QDF.QualifyFelds)DoDirFileName]) as [$(vL.QDF.QualifyFelds)DoDirFileNameCount]
Resident [$(vL.QDF.DoDirTableName)] 
group by [$(vL.QDF.QualifyFelds)DoDirFileName]; 

else
	trace '### QDF Info, DoDir cant find file/path $(vL.QDF.DoDirRoot)';
endif 

SET vL.QDF.DoDirTableName =;
SET vL.QDF.DoDirFile=;
SET vL.QDF.DoDirRootTmp=;
SET vL.QDF.DirTmp=;
SET vL.QDF.Specific_File_Type=;
SET vL.QDF.SingleFolder=;
SET vL.QDF.FoldersOnly=;
SET vL.QDF.QualifyFelds=;
SET vL.QDF.Filename=;
end sub

// *************************************
// Functions written by Magnus Berg Qlik
// *************************************
