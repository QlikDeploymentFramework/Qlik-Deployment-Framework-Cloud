// __________________________________________________________________________
 // Qlik Deployment Framework BaseVariable 11.DynamicContainerGlobalVariables.qvs  
 // All path are based on vG.BasePath                        				 
 // This script is used to dynamic connect to container folders     		 
 // This script should only be accessed from QlikView via the LoadContainerGlobalVariables function
 // SUB DynamicContainerGlobalVariables ('Container Path Name',['Optional Single Folder'], ['Optional use alternative Container Map']);
 // Example: call DynamicContainerGlobalVariables('1.AcmeStore');
 //  Example: call DCGV('1.AcmeStore');
 //____________________________________________________________________________

SUB DynamicContainerGlobalVariables(vL.QDF.ContainerName,vL.QDF.SingleFolder,vL.QDF.OverridePrefix);

// Writing information in log
trace '### QDF DynamicContainerGlobalVariables Started';
SET vL.ContainerFolderName = ; // Reset variable
SET vL.QDF.BasePath = ; // Reset variable
set vL.HideQDFTemplates ='true'; //Default use qualified folders and hide QDF templates

if filesize('$(vG.SharedBaseVariablePath)\ContainerMap.csv') >0 then // If null use default ContainerMap else Shared ContainerMap is used
	let vL.QDF.ContainerMapPath = '$(vG.SharedBaseVariablePath)\ContainerMap.csv';
else
	let vL.QDF.ContainerMapPath = '$(vG.BaseVariablePath)\ContainerMap.csv';	
end if


// Load container mapping table and variables by using LoadContainerMap function

// If no container specified use home container
if '$(vL.QDF.ContainerName)' = '' then 
	SET vL.QDF.BasePath = '$(vG.BasePath)';
	SET vL.ContainerPathName=;
	set vL.Comment='Loading vG.BasePath Global Path Variables'; 
	SET vL.ContainerFolderName='BasePath';

// Use folder or lib path is specified instead of a ontainer
elseif SubstringCount('$(vL.QDF.ContainerName)','\') > 0  or SubstringCount('$(vL.QDF.ContainerName)','/') > 0 then 
	SET vL.QDF.BasePath = '$(vL.QDF.ContainerName)\';
	SET vL.ContainerPathName=;
	set vL.Comment='Loading vG.BasePath Global Path Variables'; 
	SET vL.ContainerFolderName='BasePath';
	// If specifying a path and folders dissable special folder syntax
	if not '$(vL.QDF.SingleFolder)'='' then
		set vL.HideQDFTemplates =; //Revoke qualified folders if path is specified
	endif

// Qlik Sense optional separate LIB mount folder validation
elseif filesize('lib://$(vL.QDF.ContainerName)/Initlink.qvs') > 1 then
	trace '### QDF Info, Qlik Sense folder repository (Separate LIB mount)';
	SET vL.QDF.BasePath = 'lib://$(vL.QDF.ContainerName)/';
	SET vL.ContainerPathName='$(vL.QDF.ContainerName)';	

//Search container map for containername
else
	call LoadContainerMap('$(vL.QDF.ContainerMapPath)','$(vL.QDF.ContainerName)'); // Using LoadContainerMap with special switches the Container links will be populated automatically
	if trim('$(vL.ContainerPathName)')= '$(vL.QDF.ContainerName)' then // If container found by LoadContainerMap sub function
		SET vL.QDF.BasePath  = '$(vL.RootPath)$(vL.ContainerFolderName)\';
		
	elseif not IsNull(filesize('$(vL.QDF.ContainerName)')) = -1 then // If container not found it could be a folder path instead of a Map reference
		SET vL.QDF.BasePath  = '$(vL.QDF.ContainerName)\';
		// SET vL.ContainerFolderName = 'No folder found, Custom path used';
	endif;
endif;

if not '$(vL.QDF.BasePath)'='' then // Execute only if container found

if not '$(vL.QDF.OverridePrefix)'='' then // If OverridePrefix swish is used set the prefix
	LET vL.ContainerPathName='$(vL.QDF.OverridePrefix)';
	trace '### QDF Info, Override Prefix switsh $(vL.QDF.OverridePrefix) used';
endif;

Call DoDir ('$(vL.QDF.BasePath)','vL.DoDir_Tmp_Table','true','','true','$(vL.HideQDFTemplates)'); // Creates DoDir Table 'vL.DoDir_Tmp_Table' on folders only from vL.QDF.BasePath path

if NoOfFields('vL.DoDir_Tmp_Table') > 0 then // Validate if DoDir table exists

// loop through DoDir Table
let vL.QDF.xxxxx = NoOfRows('vL.DoDir_Tmp_Table');

for vL.QDF.ttttt = 0 to vL.QDF.xxxxx-1

		LET vL.QDF.VariablePrefix = PurgeChar(subfield(peek('vL.DoDir_Tmp_Table.DoDirFileName',$(vL.QDF.ttttt),'vL.DoDir_Tmp_Table'),'.',-1),'=;,- '&chr(39));
		LET vL.QDF.PhysicalFolderName = peek('vL.DoDir_Tmp_Table.FullyQualifiedName',$(vL.QDF.ttttt),'vL.DoDir_Tmp_Table');	
		LET vL.QDF.DuplicatedFolders=peek('vL.DoDir_Tmp_Table.DoDirFileNameCount',$(vL.QDF.ttttt),'vL.DoDir_Tmp_Table');	
		LET vL.QDF.SubStringSplitt=';'&'$(vL.QDF.SingleFolder)'&';'; // Creating a variable used for easy substring splitt
		For vL.QDF.SubString=1 to substringcount ('$(vL.QDF.SubStringSplitt)',';') -1 // loop as many times there are folders defined (separated by ;)
			if TextBetween('$(vL.QDF.SubStringSplitt)' , ';', ';' , vL.QDF.SubString ) = '$(vL.QDF.VariablePrefix)' or '$(vL.QDF.SingleFolder)'='' then
				if vL.QDF.DuplicatedFolders > 1 then //If duplicated folders found send error message
					trace '### QDF Warning, Found duplicated folders of $(vL.QDF.VariablePrefix) in location $(vL.QDF.PhysicalFolderName)\'
					trace '### QDF Warning, Please fix the duplication error else there might be issues';
				endif
				LET vG.$(vL.ContainerPathName)$(vL.QDF.VariablePrefix)Path='$(vL.QDF.PhysicalFolderName)\';
				// Writing information in log
				trace '### QDF Info, Created Global Variable vG.$(vL.ContainerPathName)$(vL.QDF.VariablePrefix)Path';
			endif	
		next vL.QDF.SubString;
next vL.QDF.ttttt


// Trim pace and last \
if right('$(vL.QDF.BasePath)',1)='\' then
	let vL.QDF.BasePath=left(trim('$(vL.QDF.BasePath)'), len('$(vL.QDF.BasePath)')-1);
endif

 if '$(vL.QDF.SingleFolder)' ='' then // If SingleFolder not used add global vG.xxBasePath variable among the others
 	LET vG.$(vL.ContainerPathName)BasePath='$(vL.QDF.BasePath)';
endif

drop table [vL.DoDir_Tmp_Table]; // Drop DoDir tmp table
trace '### QDF Info, DynamicContainerGlobalVariables Finished';

else
	trace '### QDF Warning, unable to identify DoDir table, probably no valid folder exists';
endif

else
	trace '### QDF Info, Could not find $(vL.ContainerPathName) container in Container Map';
endif;

// Clean Variables
SET vL.QDF.ttttt = ;
SET vL.QDF.xxxxx = ;
SET vL.QDF.ContainerName=;
SET vL.QDF.ContainerMapPath=;
SET vL.QDF.SingleFolder=;
SET vL.QDF.BasePath=;
SET vL.ContainerFolderName=;
SET vL.QDF.PhysicalFolderName=;
SET vL.QDF.VariablePrefix=;
SET vL.ContainerPathName=;
SET vL.RootPath=;
SET vL.Comment=;
SET vL.QDF.SingleFolder=;
SET vL.QDF.SubStringSplitt=;
SET vL.QDF.SubString=;
SET vL.QDF.DuplicatedFolders=;
SET vL.QDF.OverridePrefix=;
endsub

// Sub Function short name for DynamicContainerGlobalVariables = DCGV
SUB DCGV(vL.QDF.ContainerName_tmp,vL.QDF.SingleFolder_tmp,vL.QDF.OverridePrefix_tmp); // Alias for LoadContainerGlobalVariables
	call DynamicContainerGlobalVariables('$(vL.QDF.ContainerName_tmp)','$(vL.QDF.SingleFolder_tmp)','$(vL.QDF.OverridePrefix_tmp)');
	
	// Clean Variables
	SET vL.QDF.ContainerName_tmp=;
	SET vL.QDF.SingleFolder_tmp=;
	SET vL.QDF.OverridePrefix_tmp=;
end sub


// *************************************
// Functions written by Magnus Berg Qlik
// *************************************